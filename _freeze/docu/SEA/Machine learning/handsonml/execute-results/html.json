{
  "hash": "a55040334c41f8dd604b6d1220abcc1f",
  "result": {
    "markdown": "---\ntitle: 'Hands-On Machine Learning with Scikit-Learn ,Keras and Tensorflow'\nexecute:\n  warning: false\n  freeze: true\n  keep-ipynb: true\ntoc: true\nformat:\n  html:\n    html-math-method: katex\n    code-block-bg: '#E5E7E9'\n    df-print: paged\n    code-overflow: wrap\n    code-copy: true\n---\n\n![Image of the book](IMG_9683.jpg)\n\n## Introduction\n\nA pure code based implementation with necessary mathematical formulations included.\n\n### End to End machine Learning\n\n### Performance Measure\n\n<b> <u>Root Mean Square Error </b> </u> $$ RMSE(\\textbf{X},h)= \\sqrt{\\frac{\\sum_{i = 1}^{m}{(h{(x^{(i)})- y ^{(i)}}})^2}{m}}$$ $m$- is the number of instances in the datasets you are measuring the RMSE on <br /> $x^{(i)}$- is the vector of all teh feature values of the $i^{th}$ instance in the dataset<br/> $y^{(i)}$- is its label<br/> $\\textbf{X}$- is the matrix containing all the feature value of all the instances in the dataset. $x^{(i)}$ transpose is the $i^{th}$-row in $\\textbf{X}$ </br> h - is the system's prediction function also called as hypothesis. It is also represented by $\\hat{y}$ where $\\hat{y}^{(i)} = h(x^{(i)})$</br> $RMSE(\\textbf{X},h)$- is the cost function measured on the set of examples using the hypothesis h </br>\n\n<b> <u>Mean absolute Error</b> </u > $$ MAE(\\textbf{X},h)= \\frac{\\sum_{i = 1}^{m}{|h{(x^{(i)})- y ^{(i)}}}|}{m}$$\n\nThe difference between these two performance measure is how the norm is caculated. RSME makes use of $\\mathcal{l}_2$ norm while MAE makes use of $\\mathcal{l}_1$ norm.\n\n#### Download the DATA\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os \nimport tarfile\nimport urllib\n\nDownload_Root = \"https://raw.githubusercontent.com/ageron/handson-ml2/master/\"\nHousing_Path = os.path.join(\"Data\",\"housing\") # for creating your local directory with DATA as main directory and housign as sub directory\nHousing_URL = Download_Root + \"datasets/housing/housing.tgz\"\n\ndef fetch_housing_data(housing_url = Housing_URL,housing_path = Housing_Path):\n    os.makedirs(housing_path,exist_ok = True)# Will create a directory with name at housing path , exist_ok will check if it already exist , if yes leaving it unaltered\n    tgz_path = os.path.join(housing_path,\"housing.tgz\")\n    urllib.request.urlretrieve(housing_url,tgz_path)\n    housing_tgz = tarfile.open(tgz_path)\n    housing_tgz.extractall(path=housing_path)\n    housing_tgz.close()\n    \nfetch_housing_data() # call the function\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n\ndef load_housing_data(housing_path = Housing_Path):\n    csv_path = os.path.join(housing_path,\"housing.csv\")\n    return pd.read_csv(csv_path)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nhousing = load_housing_data()\nhousing.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>longitude</th>\n      <th>latitude</th>\n      <th>housing_median_age</th>\n      <th>total_rooms</th>\n      <th>total_bedrooms</th>\n      <th>population</th>\n      <th>households</th>\n      <th>median_income</th>\n      <th>median_house_value</th>\n      <th>ocean_proximity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-122.23</td>\n      <td>37.88</td>\n      <td>41.0</td>\n      <td>880.0</td>\n      <td>129.0</td>\n      <td>322.0</td>\n      <td>126.0</td>\n      <td>8.3252</td>\n      <td>452600.0</td>\n      <td>NEAR BAY</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-122.22</td>\n      <td>37.86</td>\n      <td>21.0</td>\n      <td>7099.0</td>\n      <td>1106.0</td>\n      <td>2401.0</td>\n      <td>1138.0</td>\n      <td>8.3014</td>\n      <td>358500.0</td>\n      <td>NEAR BAY</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-122.24</td>\n      <td>37.85</td>\n      <td>52.0</td>\n      <td>1467.0</td>\n      <td>190.0</td>\n      <td>496.0</td>\n      <td>177.0</td>\n      <td>7.2574</td>\n      <td>352100.0</td>\n      <td>NEAR BAY</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-122.25</td>\n      <td>37.85</td>\n      <td>52.0</td>\n      <td>1274.0</td>\n      <td>235.0</td>\n      <td>558.0</td>\n      <td>219.0</td>\n      <td>5.6431</td>\n      <td>341300.0</td>\n      <td>NEAR BAY</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-122.25</td>\n      <td>37.85</td>\n      <td>52.0</td>\n      <td>1627.0</td>\n      <td>280.0</td>\n      <td>565.0</td>\n      <td>259.0</td>\n      <td>3.8462</td>\n      <td>342200.0</td>\n      <td>NEAR BAY</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nhousing.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 20640 entries, 0 to 20639\nData columns (total 10 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   longitude           20640 non-null  float64\n 1   latitude            20640 non-null  float64\n 2   housing_median_age  20640 non-null  float64\n 3   total_rooms         20640 non-null  float64\n 4   total_bedrooms      20433 non-null  float64\n 5   population          20640 non-null  float64\n 6   households          20640 non-null  float64\n 7   median_income       20640 non-null  float64\n 8   median_house_value  20640 non-null  float64\n 9   ocean_proximity     20640 non-null  object \ndtypes: float64(9), object(1)\nmemory usage: 1.6+ MB\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nhousing[\"ocean_proximity\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n<1H OCEAN     9136\nINLAND        6551\nNEAR OCEAN    2658\nNEAR BAY      2290\nISLAND           5\nName: ocean_proximity, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nhousing.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>longitude</th>\n      <th>latitude</th>\n      <th>housing_median_age</th>\n      <th>total_rooms</th>\n      <th>total_bedrooms</th>\n      <th>population</th>\n      <th>households</th>\n      <th>median_income</th>\n      <th>median_house_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20433.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n      <td>20640.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>-119.569704</td>\n      <td>35.631861</td>\n      <td>28.639486</td>\n      <td>2635.763081</td>\n      <td>537.870553</td>\n      <td>1425.476744</td>\n      <td>499.539680</td>\n      <td>3.870671</td>\n      <td>206855.816909</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.003532</td>\n      <td>2.135952</td>\n      <td>12.585558</td>\n      <td>2181.615252</td>\n      <td>421.385070</td>\n      <td>1132.462122</td>\n      <td>382.329753</td>\n      <td>1.899822</td>\n      <td>115395.615874</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-124.350000</td>\n      <td>32.540000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>0.499900</td>\n      <td>14999.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>-121.800000</td>\n      <td>33.930000</td>\n      <td>18.000000</td>\n      <td>1447.750000</td>\n      <td>296.000000</td>\n      <td>787.000000</td>\n      <td>280.000000</td>\n      <td>2.563400</td>\n      <td>119600.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>-118.490000</td>\n      <td>34.260000</td>\n      <td>29.000000</td>\n      <td>2127.000000</td>\n      <td>435.000000</td>\n      <td>1166.000000</td>\n      <td>409.000000</td>\n      <td>3.534800</td>\n      <td>179700.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>-118.010000</td>\n      <td>37.710000</td>\n      <td>37.000000</td>\n      <td>3148.000000</td>\n      <td>647.000000</td>\n      <td>1725.000000</td>\n      <td>605.000000</td>\n      <td>4.743250</td>\n      <td>264725.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>-114.310000</td>\n      <td>41.950000</td>\n      <td>52.000000</td>\n      <td>39320.000000</td>\n      <td>6445.000000</td>\n      <td>35682.000000</td>\n      <td>6082.000000</td>\n      <td>15.000100</td>\n      <td>500001.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n%matplotlib inline \nimport matplotlib.pyplot as plt\nhousing.hist(bins = 50 ,figsize = (20,15))\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\narray([[<AxesSubplot: title={'center': 'longitude'}>,\n        <AxesSubplot: title={'center': 'latitude'}>,\n        <AxesSubplot: title={'center': 'housing_median_age'}>],\n       [<AxesSubplot: title={'center': 'total_rooms'}>,\n        <AxesSubplot: title={'center': 'total_bedrooms'}>,\n        <AxesSubplot: title={'center': 'population'}>],\n       [<AxesSubplot: title={'center': 'households'}>,\n        <AxesSubplot: title={'center': 'median_income'}>,\n        <AxesSubplot: title={'center': 'median_house_value'}>]],\n      dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](handsonml_files/figure-html/cell-8-output-2.png){width=1557 height=1170}\n:::\n:::\n\n\nFew point about the data\n\n-   The median income is capped at 15 for higher median incomes and at 0.5 for lower median incomes. The numbers are denominated in \\$10000 i.e 3 in the chart represents 30,000 USD\n\n-   The housing median age and median house value were also capped. Since median house value is our target variable this is a source of a problem.The prediction might never go beyond the capped limit.\n\n-   The attributes have different scales\n\n-   Many of the histograms are tail-heavy. Important to normalize the data as some machine learning algorithims might fail to detect patterns effectively\n\n#### Creating a test set and train set\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nimport numpy as np\nnp.random.seed(50)# will always give the same test set and train set \ndef split_train_test(data,test_ratio):\n    shuffled_indices = np.random.permutation(len(data))\n    test_set_size = int(len(data)*test_ratio)\n    test_indices = shuffled_indices[:test_set_size]\n    train_indices = shuffled_indices[test_set_size:]\n    return data.loc[train_indices] ,data.loc[test_indices]\n\ntrain_set , test_set = split_train_test(housing,0.2)\nprint(len(train_set))\nprint(len(test_set))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n16512\n4128\n```\n:::\n:::\n\n\n",
    "supporting": [
      "handsonml_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}