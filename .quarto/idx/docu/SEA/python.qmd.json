{"title":"Programming language","markdown":{"yaml":{"title":"Programming language","abstract":"Mostly for Self- reference"},"headingText":"Python","containsRefs":false,"markdown":"\n\n\n### Introduction\n\n-   High Level language - Strong abstraction, easy to use and easy to understand syntax.\n-   General purpose programming language\n-   Indentation important\n-   Case Sensitive\n-   Supports multiple programming paradigms such OOP and functional\n-   Excellently documented and comprehensive standard library\n-   Dynamically but Strongly typed - Types are checked at run time and forbids operations that are not of the same type\n-   Garbage collected - Automatic memory management\n\n### Basics\n\n-   The Python Standard Library\n    -   Built-in types\n        -   list ,tuple, set, dict and others\n    -   Built-in functions\n        -   print() , len() ,range(),enumerate(),map(),zip() and others\n    -   Built-in modules\n        -   os,sys,itertools,collecations,math and others\n\n### Few important methods and libraries\n\n\n## C++\n\n### Introduction\n\n-   The standard Template Library\n    -   Sequence Containers - Vectors ,Lists, Stacks\n    -   Associative containers - Sets , Maps\n    -   Algorithms - Sort, Copy,Reverse , Min,Max\n    -   Iterators - Abstracted objects that allow iteration across a container\n    -   Input/Output - iostream ,fstream,string\n-   The Boost Libraries - Third-party libraries\n    -   File System interface abstraction\n    -   regular expressions\n    -   threading\n    -   smart pointers\n    -   networking\n-   Object Oriented Programming\n    -   Constructors - default , parameter , copy ,assignment operator(not a constructor technically)\n    -   Destructor - deallocate any memory allocated upon object creation\n    -   Selectors - ability to read member data and provide calculations based upon the data e.g. getter method\n    -   Modifiers - able to read member data as well as change that data e.g. setter method\n    -   Inheritance - Used to model a type of relationship between object known as <i> is-a </i> </br> For example American call option is a call option hence American call option should inherit all properties a call option possess such as strike price and underlying price.\n\n### Few important methods \n\n- Virtual Destructors -  virtual destructor ensures that when derived subclasses go out of scope or are deleted the order of destruction of each class in a hierarchy is carried out correctly. If the destruction order of the class objects is incorrect, in can lead to what is known as a memory leak.\n\n- Template Classes \n    - They behave in a different way. They allow us to define classes without the need to specify the types of data that the classes will utilise upfront.  \n    \n\n\n## Cpython\n\n## R\n\n## SQL\n\n## Kdb+/q\n\n- Why use KDB+/q\n   - Optimized for time-series data and real-time analytics\n\t- Column-oriented storage structure\n\t- In-memory first architecture for extremely fast processing (keep as much \t\t     data as possible in RAM rather than on disk)\n\t- Built-in programming language (q) that integrates with the database\n\t- Excellent performance for large-scale time-series calculations\n\n- list of all functions\n\t- tables[] - gives list of all tables stored in database.\n\t- count db  - returns number of rows \n\t- cols db  - retruns list of names of columns\n\t- meta - gives meta data namely column type , foreign keys , [attributes](https://code.kx.com/q/basics/syntax/#attributes)\n\n\n## git\n\n## SQL\nNormalization\n\n-   Purpose\n    -   To characterize the level of redundancy in a relational schema\n    -   Provide mechanisms for transforming schemas in order to remove redundancy\n-   Types\n    -   First normal form : atomic values and not a tuple in any column\n    -   Second normal form : no partial dependencies\n    -   Third normal form : no transitive dependencies\n    -   Boyce-Codd normal form : For any dependency A -\\> B , A should be a super key\n    -   Each normal form must satisfy the previous normal form\n    \n    \n    \n    \n    \n    \n    \n    \n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"output-file":"python.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","jupyter":"python3","theme":"sketchy","toc-location":"right","title":"Programming language","abstract":"Mostly for Self- reference"},"extensions":{"book":{"multiFile":true}}}}}